name: Build and Push Docker Image to AWS ECR

on:
  push:
    branches:
      - main  # Adjust branch name as needed

env:
  AWS_REGION: us-east-1  # Update with your AWS region
  ECR_REPOSITORY: medium-app-repo  # Replace with your ECR repository name
  EC2_BASTION_HOST: ${{ secrets.EC2_BASTION_HOST }}
  IMAGE_TAG: $(git rev-parse --short HEAD)

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Retrieve EC2 instance IDs by Tag
        id: ec2-instances
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=dev-medium-app-alb-waf-instance" --query "Reservations[*].Instances[*].InstanceId" --output json)
          instance_ids=$(echo "$INSTANCE_IDS" | jq -r '.[][]')
          instance_ids=$(echo "$instance_ids" | paste -sd " " -)
          echo "Found instances: $instance_ids"
          echo "::set-output name=instance_ids::$instance_ids"

      - name: Retrieve EC2 instance IPs and Deploy Containers
        id: ec2-ips
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          INSTANCE_IPS=$(aws ec2 describe-instances --instance-ids ${{ steps.ec2-instances.outputs.instance_ids }} --query "Reservations[*].Instances[*].PublicIpAddress" --output json)
          # Format IPs as comma-separated string
          instance_ids=$(echo "$INSTANCE_IPS" | jq -r '.[][]')
          echo "::set-output name=instance_ips::$INSTANCE_IPS"
          aws ssm send-command --instance-ids ${{ steps.ec2-instances.outputs.instance_ids }} --document-name "AWS-RunShellScript" --comment "Deploy Docker container" --parameters '{"commands":["docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}","docker stop medium-app || true","docker rm medium-app || true","docker run -d -p 80:3000 --name medium-app ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"]}'
